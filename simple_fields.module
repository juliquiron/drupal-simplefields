<?php

/**
 * @file
 * Module for the Entityform Entity - a starting point to create your own Entity
 * and associated administration interface
 */

/**
 * Implements hook_menu().
 */
function simple_fields_menu() {
  $items = array();

  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];
          // Different bundles can appear on the same path (e.g. %node_type and
          // %comment_node_type). To allow field_ui_menu_load() to extract the
          // actual bundle object from the translated menu router path
          // arguments, we need to identify the argument position of the bundle
          // name string ('bundle argument') and pass that position to the menu
          // loader. The position needs to be casted into a string; otherwise it
          // would be replaced with the bundle name string.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }
          // This is the position of the %field_ui_menu placeholder in the
          // items below.
          $field_position = count(explode('/', $path)) + 1;

          $items["$path/fields/%field_ui_menu/location_condition"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => 'Edit',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('simple_fields_manager_location_condition', $field_position),
            'type' => MENU_DEFAULT_LOCAL_TASK,
          );
 

        }
      }
    }
  }
  $items["admin/config/content/simplefields/fields/%/location_condition"] = array(
    'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_fields_manager_location_condition', $field_position),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('access simple fields manager'),
  );

  $items['admin/config/content/simplefields'] = array(
      'title' => 'Simple fields',
      'description' => '',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simple_fields_manager'),
      'access arguments' => array('access simple fields manager'),
            'type' => MENU_LOCAL_TASK,
//      'file' => 'simple_fields.forms.inc',
  );
  $items['admin/config/content/simplefields/config'] = array(
      'title' => 'Simple fields',
      'description' => '',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simple_fields_manager_admin'),
      'access arguments' => array('admin simple fields manager'),
//      'file' => 'simple_fields.forms.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function simple_fields_permission() {
  $permissions = array(
      'access simple fields manager' => array(
          'title' => t('Access to simple field manager'),
      ),
      'admin simple fields manager' => array(
          'title' => t('Administer the simple field manager configuration'),
      ),
  );
  return $permissions;
}
/**
 * Implements menu callbacks
 */
function simple_fields_manager_location_condition($form, &$form_state, $instance) {
  dsm($form);
  dsm($instance);

  $form = array();
  return system_settings_form($form);
}
function simple_fields_manager($form, &$form_state) {
  //require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'field_ui') . '/field_ui.admin.inc'; 
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'simple_fields') . '/simple_fields.admin.inc'; 
  $entity_type =  variable_get('simple_fields_entity_type','');
  $bundle = variable_get('simple_fields_entity_bundle','');
  //$admin_path = _field_ui_bundle_admin_path($entity_type, $bundle);
  $admin_path = 'admin/config/content/simplefields';
  $form = field_ui_field_overview_form($form, &$form_state, $entity_type, $bundle);

  /**
   * Lets customize the default form 'manage fields'
   */
  // load needed vars like overview_form
  $bundle = field_extract_bundle($entity_type, $bundle);

  // Gather bundle information.
  $instances = field_info_instances($entity_type, $bundle);
  $field_types = field_info_field_types();
  $widget_types = field_info_widget_types();
  $extra_fields = field_info_extra_fields($entity_type, $bundle, 'form');

  $form['fields']['#header'] = array (
    t('Label'),
    t('Weight'),
    t('Parent'),
    array('data' => t('Operations'), 'colspan' => 3),
    );

//  conditional_fields_dependency_insert();

  foreach ($instances as $name => $instance) {
    $field = field_info_field($instance['field_name']);
    $admin_field_path = $admin_path . '/fields/' . $instance['field_name'];
    unset($form['fields'][$name]['field_name']);
    unset($form['fields'][$name]['type']);
    unset($form['fields'][$name]['widget_type']);
    unset($form['fields'][$name]['edit']);
//    $form['fields'][$name]['label']['#cell_attributes'] = array('colspan' => 8);
    $form['fields'][$name]['location_condition'] = array (
      '#type' => 'link',
      '#title' => t('location condition'),
      '#href' => $admin_field_path . '/location_condition',
      '#options' => array('attributes' => array('title' => t('Add a location based condition.'))),
      );
    $form['fields'][$name]['field_condition'] = array (
      '#type' => 'link',
      '#title' => t('field condition'),
      '#href' => $admin_field_path . '/location_condition',
      '#options' => array('attributes' => array('title' => t('Add a field based condition.'))),
      );
  }
  unset($form['fields']['_add_existing_field']);
  $form['fields']['_add_new_field']['type']['#type'] = 'hidden';
  $form['fields']['_add_new_field']['type']['#value'] = variable_get('simple_fields_field_type' ,'');
  $form['fields']['_add_new_field']['widget_type']['#type'] = 'hidden';
  $form['fields']['_add_new_field']['widget_type']['#value'] = variable_get('simple_fields_field_widget' ,'');
  $form['fields']['_add_new_field']['field_name']['#cell_attributes'] = array('colspan' => 2);
  $form['fields']['_add_new_field']['field_name']['#size'] = 60;
  $form['fields']['_add_new_field']['field_name']['#maxlength'] = 260;

  dsm($form);
  return $form;

}
function simple_fields_manager_submit($form, &$form_state) {
  watchdog('simple_fields', "form submit");
  $form_values = $form_state['values']['fields'];
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $admin_path = _field_ui_bundle_admin_path($entity_type, $bundle);

  $bundle_settings = field_bundle_settings($entity_type, $bundle);

  // Update field weights.
  foreach ($form_values as $key => $values) {
    if (in_array($key, $form['#fields'])) {
      $instance = field_read_instance($entity_type, $key, $bundle);
      $instance['widget']['weight'] = $values['weight'];
      field_update_instance($instance);
    }
    elseif (in_array($key, $form['#extra'])) {
      $bundle_settings['extra_fields']['form'][$key]['weight'] = $values['weight'];
    }
  }

  field_bundle_settings($entity_type, $bundle, $bundle_settings);

  $destinations = array();

  // Create new field.
  $field = array();
  if (!empty($form_values['_add_new_field']['field_name'])) {
    $values = $form_values['_add_new_field'];

    $field = array(
      'field_name' => $values['field_name'],
      'type' => $values['type'],
      'translatable' => $values['translatable'],
    );
    $instance = array(
      'field_name' => $field['field_name'],
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $values['label'],
      'widget' => array(
        'type' => $values['widget_type'],
        'weight' => $values['weight'],
        'settings' => array('display_label' => 1),
      ),
    );

    dsm($field);
    dsm($instance);
    // Create the field and instance.
    try {
      field_create_field($field);
      field_create_instance($instance);

//      $destinations[] = $admin_path . '/fields/' . $field['field_name'] . '/field-settings';
//      $destinations[] = $admin_path . '/fields/' . $field['field_name'];

      // Store new field information for any additional submit handlers.
      $form_state['fields_added']['_add_new_field'] = $field['field_name'];
    }
    catch (Exception $e) {
      drupal_set_message(t('There was a problem creating field %label: !message', array('%label' => $instance['label'], '!message' => $e->getMessage())), 'error');
    }
  }

  if ($destinations) {
    $destination = drupal_get_destination();
    $destinations[] = $destination['destination'];
    unset($_GET['destination']);
    $form_state['redirect'] = field_ui_get_destinations($destinations);
  }
  else {
    drupal_set_message(t('Your settings have been saved.'));
  }

}
function simple_fields_manager_admin($form, &$form_state) {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'field_ui') . '/field_ui.admin.inc'; 
  $field_type_options = field_ui_field_type_options();
  $widget_type_options = field_ui_widget_type_options(NULL, TRUE);
  $form['simple_fields_entity_type'] = array ( // Select the entity to work with
    '#type' => 'textfield',
    '#title' => t('Select the entity type to work with'),
    '#default_value' => variable_get('simple_fields_entity_type', ''),
    // TODO CARREGAR LA LLISTA DE VALORS POSIBLES VIA API);
    );
  $form['simple_fields_entity_bundle'] = array ( //Select the entity bundle to work with
    '#type' => 'textfield',
    '#title' => t('Select the entity type to work with'),
    '#default_value' => variable_get('simple_fields_entity_bundle', ''),
    // TODO CARREGAR LA LLISTA DE VALORS POSIBLES VIA API);
    );
  $form['simple_fields_field_type'] = array (
        '#title' => t('Type of the data to store'),
        '#type' => 'select',
        '#title' => t('Type of new field'),
        '#title_display' => 'invisible',
        '#options' => $field_type_options,
        '#empty_option' => t('- Select a field type -'),
        '#description' => t('Type of data to store.'),
        '#attributes' => array('class' => array('field-type-select')),
        '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
        '#default_value' => variable_get('simple_fields_field_type' ,''),
    );
  $form['simple_fields_field_widget'] = array (
        '#title' => t('Form element to edit the data'),
        '#type' => 'select',
        '#title' => t('Widget for new field'),
        '#title_display' => 'invisible',
        '#options' => $widget_type_options,
        '#empty_option' => t('- Select a widget -'),
        '#description' => t('Form element to edit the data.'),
        '#attributes' => array('class' => array('widget-type-select')),
        '#cell_attributes' => array('colspan' => 3),
        '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
        '#default_value' => variable_get('simple_fields_field_widget', ''),
      );
 
  return system_settings_form($form);
}

